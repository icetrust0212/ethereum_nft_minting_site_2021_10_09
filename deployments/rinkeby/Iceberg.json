{
  "address": "0x0d2509E505697832eb1cd4884c59d6545d480EeD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LinkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "AddedWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "PauseEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "RemainTokenCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "RemovedWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SoldOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "welcomeToNFT",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ELEMENTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_AT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VRFCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator2Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getUnsoldTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokensId",
          "type": "uint256[]"
        }
      ],
      "name": "mintUnsoldTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rawOwnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "requestRandomNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxElements",
          "type": "uint256"
        }
      ],
      "name": "setMaxElementCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_pause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x39b2391a1a8ec2303fd38db563deeeca54bacbd4301cb1dc0da99bb9b701f442",
  "receipt": {
    "to": null,
    "from": "0x1979A0a4dBA88D90b4f1CF9fcD199EA50DE50F74",
    "contractAddress": "0x0d2509E505697832eb1cd4884c59d6545d480EeD",
    "transactionIndex": 13,
    "gasUsed": "5582701",
    "logsBloom": "0x
    "blockHash": "0x83648e10da09c6bfdf43a4dae78de4103d8d2a49250cc09ba76858b5753a9ca2",
    "transactionHash": "0x39b2391a1a8ec2303fd38db563deeeca54bacbd4301cb1dc0da99bb9b701f442",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 9519019,
        "transactionHash": "0x39b2391a1a8ec2303fd38db563deeeca54bacbd4301cb1dc0da99bb9b701f442",
        "address": "0x0d2509E505697832eb1cd4884c59d6545d480EeD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001979a0a4dba88d90b4f1cf9fcd199ea50de50f74"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x83648e10da09c6bfdf43a4dae78de4103d8d2a49250cc09ba76858b5753a9ca2"
      }
    ],
    "blockNumber": 9519019,
    "cumulativeGasUsed": "7402963",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://gateway.pinata.cloud/ipfs/Qmd8ZqZqrW7r99qbmGbKwrsp8HbCxAHBMfWYGSp8ao43hX/",
    6,
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01BE23585060835E02B77ef475b0Cc51aA1e0709",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311"
  ],
  "solcInputHash": "4c161f6b189ca9a8a4f5525983978fe0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LinkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"PauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"RemainTokenCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SoldOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"welcomeToNFT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ELEMENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_AT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRFCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getUnsoldTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokensId\",\"type\":\"uint256[]\"}],\"name\":\"mintUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rawOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"requestRandomNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxElements\",\"type\":\"uint256\"}],\"name\":\"setMaxElementCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"rawOwnerOf(uint256)\":{\"details\":\"Edit for rawOwnerOf token\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_tokenId\":\"- the NFT asset queried for royalty information\",\"_value\":\"- the sale price of the NFT asset specified by _tokenId\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for value sale price\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setRoyalties(address,uint256)\":{\"details\":\"This function in a real contract should be protected with a onlOwner (or equivalent) modifier\",\"params\":{\"recipient\":\"the royalties recipient\",\"value\":\"royalties value (between 0 and 10000)\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRoyalties(address,uint256)\":{\"notice\":\"Allows to set the royalties on the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"Iceberg\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/ERC2981Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\r\\n\\r\\nimport './IERC2981Royalties.sol';\\r\\n\\r\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\r\\nabstract contract ERC2981Base is ERC165, IERC2981Royalties {\\r\\n    struct RoyaltyInfo {\\r\\n        address recipient;\\r\\n        uint24 amount;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc\\tERC165\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC2981Royalties).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b5205bd05f2e56908a2c113c8b0b3dc0b27df0569df68db5e0475bb3a2d8d79\",\"license\":\"MIT\"},\"contracts/ERC2981ContractWideRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\r\\n\\r\\nimport './ERC2981Base.sol';\\r\\n\\r\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\r\\n/// @dev This implementation has the same royalties for each and every tokens\\r\\nabstract contract ERC2981ContractWideRoyalties is ERC2981Base {\\r\\n    RoyaltyInfo private _royalties;\\r\\n\\r\\n    /// @dev Sets token royalties\\r\\n    /// @param recipient recipient of the royalties\\r\\n    /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\\r\\n    function _setRoyalties(address recipient, uint256 value) internal {\\r\\n        require(value <= 10000, 'ERC2981Royalties: Too high');\\r\\n        _royalties = RoyaltyInfo(recipient, uint24(value));\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc\\tIERC2981Royalties\\r\\n    function royaltyInfo(uint256, uint256 value)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address receiver, uint256 royaltyAmount)\\r\\n    {\\r\\n        RoyaltyInfo memory royalties = _royalties;\\r\\n        receiver = royalties.recipient;\\r\\n        royaltyAmount = (value * royalties.amount) / 10000;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x33f9d4d1df0b754d0ba755d2deef309009a0d546284e82bec81a5eec2dc864d3\",\"license\":\"MIT\"},\"contracts/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n        interfaceId == type(IERC721).interfaceId ||\\r\\n        interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n        super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Edit for rawOwnerOf token\\r\\n     */\\r\\n    function rawOwnerOf(uint256 tokenId) public view returns (address) {\\r\\n        return _owners[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        address to = address(0);\\r\\n\\r\\n        _beforeTokenTransfer(owner, to, tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\",\"keccak256\":\"0x17d79d69a91d62248d6486c16a5d171dd3d96a17c3b1ceb580e5dcbc54dc3cdb\",\"license\":\"MIT\"},\"contracts/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n/**\\r\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\r\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\r\\n * account.\\r\\n */\\r\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 => uint256) private _allTokensIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            _addTokenToAllTokensEnumeration(tokenId);\\r\\n        } else if (from != to) {\\r\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\r\\n        } else if (to != from) {\\r\\n            _addTokenToOwnerEnumeration(to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\r\\n     * @param to address representing the new owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\r\\n     */\\r\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\r\\n        uint256 length = ERC721.balanceOf(to);\\r\\n        _ownedTokens[to][length] = tokenId;\\r\\n        _ownedTokensIndex[tokenId] = length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\r\\n     */\\r\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\r\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\r\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\r\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\r\\n     */\\r\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\r\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary\\r\\n        if (tokenIndex != lastTokenIndex) {\\r\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n        }\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _ownedTokensIndex[tokenId];\\r\\n        delete _ownedTokens[from][lastTokenIndex];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\r\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\r\\n     */\\r\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\r\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\r\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\r\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\r\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _allTokensIndex[tokenId];\\r\\n        _allTokens.pop();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3cb8f91c137e3f5c17a065f378f10468de861c7edfa05b2c68539b4b56a51dbd\",\"license\":\"MIT\"},\"contracts/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title IERC2981Royalties\\r\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\r\\ninterface IERC2981Royalties {\\r\\n    /// @notice Called with the sale price to determine how much royalty\\r\\n    //          is owed and to whom.\\r\\n    /// @param _tokenId - the NFT asset queried for royalty information\\r\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\r\\n    /// @return _receiver - address of who should be sent the royalty payment\\r\\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\\r\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\r\\n        external\\r\\n        view\\r\\n        returns (address _receiver, uint256 _royaltyAmount);\\r\\n}\\r\\n\",\"keccak256\":\"0xa63615d3cc49f038dab25cc2390c4b57f01c6561542db81b34b6b3fd3878ad5c\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\nimport './ERC2981ContractWideRoyalties.sol';\\r\\n\\r\\ncontract Iceberg is ERC721Enumerable, ERC2981ContractWideRoyalties, VRFConsumerBase, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public MAX_ELEMENTS = 8888;\\r\\n    uint256 public constant PRICE = 0.02 ether;\\r\\n    uint256 public constant START_AT = 1;\\r\\n\\r\\n    address public constant creator1Address =\\r\\n        0x5DB342FB039C1c85bec5fE89Af6734621f421D84;\\r\\n    address public constant creator2Address =\\r\\n        0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87;\\r\\n    address public constant devAddress =\\r\\n        0x94Da7d3d5f83a7253a2B96427D69C971a4bac6dF;\\r\\n\\r\\n    //For VRF function\\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal VRFFee = 0.1 * 10**18; // 0.1 LINK\\r\\n    address public LinkToken;\\r\\n    address public VRFCoordinator;\\r\\n\\r\\n    //Avaiable tokenIds\\r\\n    uint256[] internal tokenIds;\\r\\n\\r\\n    //state variable for VRF\\r\\n    mapping(bytes32 => address) requestToSender;\\r\\n    \\r\\n    //whitelist\\r\\n    mapping(address => bool) whiteList;\\r\\n\\r\\n    bool private PAUSE = false;\\r\\n    string public baseTokenURI;\\r\\n\\r\\n    event PauseEvent(bool pause);\\r\\n    event welcomeToNFT(address indexed _to , uint256 id);\\r\\n    event AddedWhiteList(address indexed _to, address _address);\\r\\n    event RemovedWhiteList(address indexed _to, address _address);\\r\\n    event RemainTokenCount(uint256 _count);\\r\\n    event SoldOut();\\r\\n\\r\\n    constructor(\\r\\n        string memory baseURI,\\r\\n        uint256 maxAmount,\\r\\n        address _VRFCoordinator,\\r\\n        address _LinkToken,\\r\\n        bytes32 _keyhash\\r\\n    ) ERC721(\\\"ICEBERG\\\", \\\"ICE\\\") VRFConsumerBase(_VRFCoordinator, _LinkToken) {\\r\\n        setBaseURI(baseURI);\\r\\n        setMaxElementCount(maxAmount);\\r\\n        setRoyalties(creator1Address, 1000);\\r\\n        VRFCoordinator = _VRFCoordinator;\\r\\n        LinkToken = _LinkToken;\\r\\n        keyHash = _keyhash;\\r\\n    }\\r\\n\\r\\n    modifier saleIsOpen() {\\r\\n        require(remainTokenCount() >= 0, \\\"Soldout!\\\");\\r\\n        require(!PAUSE && !whiteList[msg.sender], \\\"Sales not open\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseTokenURI;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc\\tERC165\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721Enumerable, ERC2981Base)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @notice Allows to set the royalties on the contract\\r\\n    /// @dev This function in a real contract should be protected with a onlOwner (or equivalent) modifier\\r\\n    /// @param recipient the royalties recipient\\r\\n    /// @param value royalties value (between 0 and 10000)\\r\\n    function setRoyalties(address recipient, uint256 value) public {\\r\\n        _setRoyalties(recipient, value);\\r\\n    }\\r\\n\\r\\n\\r\\n    //init token ids\\r\\n    function _initTokenIds() internal {\\r\\n        for (uint256 i = 0; i < MAX_ELEMENTS; i++) {\\r\\n            tokenIds.push(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\r\\n        baseTokenURI = baseURI;\\r\\n    }\\r\\n\\r\\n    function remainTokenCount() public view returns (uint256) {\\r\\n        return tokenIds.length;\\r\\n    }\\r\\n\\r\\n    function mintedTokenCount () public view returns(uint256) {\\r\\n        return MAX_ELEMENTS - remainTokenCount();\\r\\n    }\\r\\n\\r\\n    //Endpoint for mint nft\\r\\n    function requestRandomNFT(address _to, uint8 amount)\\r\\n        public\\r\\n        payable\\r\\n        saleIsOpen\\r\\n    {\\r\\n        uint256 total = mintedTokenCount();\\r\\n        require(amount <= 2, \\\"Max limit\\\");\\r\\n        require(total + amount <= MAX_ELEMENTS, \\\"Max limit\\\");\\r\\n        require(msg.value >= price(amount), \\\"Value below price\\\");\\r\\n        require(\\r\\n            LINK.balanceOf(address(this)) >= VRFFee * amount,\\r\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\r\\n        );\\r\\n\\r\\n        for (uint8 i = 0; i <= amount - 1; i++) {\\r\\n            bytes32 requestId = requestRandomness(keyHash, VRFFee);\\r\\n            requestToSender[requestId] = _to;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        uint256 index = randomness % tokenIds.length;\\r\\n        address _to = requestToSender[requestId];\\r\\n        mint(_to, tokenIds[index]);\\r\\n        uint256 _count = remainTokenCount();\\r\\n        if (_count > 0) {\\r\\n            emit RemainTokenCount(_count);\\r\\n        } else {\\r\\n            emit SoldOut();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint256 _tokenId) private {\\r\\n        _mintAnElement(_to, _tokenId);\\r\\n        _removeTokenId(_tokenId);\\r\\n    }\\r\\n\\r\\n    function _mintAnElement(address _to, uint256 _tokenId) private {\\r\\n        _safeMint(_to, _tokenId);\\r\\n        emit welcomeToNFT(_to, _tokenId);\\r\\n    }\\r\\n\\r\\n    function price(uint256 _count) public pure returns (uint256) {\\r\\n        return PRICE.mul(_count);\\r\\n    }\\r\\n\\r\\n    function walletOfOwner(address _owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 tokenCount = balanceOf(_owner);\\r\\n\\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n        for (uint256 i = 0; i < tokenCount; i++) {\\r\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    function setPause(bool _pause) public onlyOwner {\\r\\n        PAUSE = _pause;\\r\\n        emit PauseEvent(PAUSE);\\r\\n    }\\r\\n\\r\\n    function getPause() public view returns(bool) {\\r\\n        return PAUSE;\\r\\n    }\\r\\n\\r\\n    function withdrawAll() public onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0);\\r\\n        // _widthdraw(devAddress, balance.mul(0).div(100));\\r\\n        _widthdraw(creator2Address, balance.mul(100).div(100));\\r\\n        // _widthdraw(creator1Address, address(this).balance);\\r\\n    }\\r\\n\\r\\n    function _widthdraw(address _address, uint256 _amount) private {\\r\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n    function getUnsoldTokens(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory tokens = new uint256[](limit);\\r\\n\\r\\n        for (uint256 i = 0; i < limit; i++) {\\r\\n            uint256 key = i + offset;\\r\\n            if (rawOwnerOf(key) == address(0)) {\\r\\n                tokens[i] = key;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    function mintUnsoldTokens(uint256[] memory _tokensId) public onlyOwner {\\r\\n        require(PAUSE, \\\"Pause is disable\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _tokensId.length; i++) {\\r\\n            if (rawOwnerOf(_tokensId[i]) == address(0)) {\\r\\n                _mintAnElement(owner(), _tokensId[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setMaxElementCount(uint256 _maxElements) public onlyOwner {\\r\\n        MAX_ELEMENTS = _maxElements;\\r\\n        _initTokenIds();\\r\\n    }\\r\\n\\r\\n    function _findTokenIdIndex(uint256 _tokenId)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            uint256 _id = tokenIds[i];\\r\\n            if (_id == _tokenId) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return tokenIds.length + 100;\\r\\n    }\\r\\n\\r\\n    //remove minted token id\\r\\n    function _removeTokenId(uint256 _tokenId) internal {\\r\\n        require(tokenIds.length > 0, \\\"tokenIds is empty\\\");\\r\\n        //get index for _tokenId\\r\\n        uint256 index = _findTokenIdIndex(_tokenId);\\r\\n        require(\\r\\n            index <= tokenIds.length,\\r\\n            \\\"Cannot find tokenIds Index - removeTokenId\\\"\\r\\n        );\\r\\n        // Move the last element into the place to delete\\r\\n        tokenIds[index] = tokenIds[tokenIds.length - 1];\\r\\n        // Remove the last element\\r\\n        tokenIds.pop();\\r\\n    }\\r\\n\\r\\n    //add whitelist\\r\\n    // function addWhiteList(address _address) public onlyOwner {\\r\\n    //     require(!whiteList[_address], \\\"Already Added\\\");\\r\\n    //     whiteList[_address] = true;\\r\\n    //     emit AddedWhiteList(owner() ,_address);\\r\\n    // }\\r\\n    // function isWhiteList(address _address) public view onlyOwner returns(bool) {\\r\\n    //     return whiteList[_address];\\r\\n    // }\\r\\n    // //remove whitelist\\r\\n    // function removeWhiteList(address _address) public onlyOwner {\\r\\n    //     require(whiteList[_address], \\\"Already removed\\\");\\r\\n    //     whiteList[_address] = false;\\r\\n    //     emit RemovedWhiteList(owner(), _address);\\r\\n    // }\\r\\n}\\r\\n\",\"keccak256\":\"0x74c9668dac18817d26f4f92f442d3937a99be26a7b95da89540222e59f77edb3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526122b8600d5567016345785d8a0000600f556000601560006101000a81548160ff0219169083151502179055503480156200003e57600080fd5b50604051620067ac380380620067ac83398181016040528101906200006491906200077a565b82826040518060400160405280600781526020017f49434542455247000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f49434500000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000ea92919062000613565b5080600190805190602001906200010392919062000613565b5050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050620001966200018a6200027460201b60201c565b6200027c60201b60201c565b620001a7856200034260201b60201c565b620001b884620003ed60201b60201c565b620001e0735db342fb039c1c85bec5fe89af6734621f421d846103e86200049660201b60201c565b82601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600e81905550505050505062000b8d565b600033905090565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620003526200027460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000378620004ac60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620003d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003c89062000885565b60405180910390fd5b8060169080519060200190620003e992919062000613565b5050565b620003fd6200027460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000423620004ac60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200047c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004739062000885565b60405180910390fd5b80600d8190555062000493620004d660201b60201c565b50565b620004a882826200052660201b60201c565b5050565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60005b600d548110156200052357601281908060018154018082558091505060019003906000526020600020016000909190919091505580806200051a9062000a01565b915050620004d9565b50565b6127108111156200056e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005659062000863565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff16815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548162ffffff021916908362ffffff1602179055509050505050565b828054620006219062000995565b90600052602060002090601f01602090048101928262000645576000855562000691565b82601f106200066057805160ff191683800117855562000691565b8280016001018555821562000691579182015b828111156200069057825182559160200191906001019062000673565b5b509050620006a09190620006a4565b5090565b5b80821115620006bf576000816000905550600101620006a5565b5090565b6000620006da620006d484620008d0565b620008a7565b905082815260208101848484011115620006f357600080fd5b620007008482856200095f565b509392505050565b600081519050620007198162000b3f565b92915050565b600081519050620007308162000b59565b92915050565b600082601f8301126200074857600080fd5b81516200075a848260208601620006c3565b91505092915050565b600081519050620007748162000b73565b92915050565b600080600080600060a086880312156200079357600080fd5b600086015167ffffffffffffffff811115620007ae57600080fd5b620007bc8882890162000736565b9550506020620007cf8882890162000763565b9450506040620007e28882890162000708565b9350506060620007f58882890162000708565b925050608062000808888289016200071f565b9150509295509295909350565b600062000824601a8362000906565b9150620008318262000aed565b602082019050919050565b60006200084b60208362000906565b9150620008588262000b16565b602082019050919050565b600060208201905081810360008301526200087e8162000815565b9050919050565b60006020820190508181036000830152620008a0816200083c565b9050919050565b6000620008b3620008c6565b9050620008c18282620009cb565b919050565b6000604051905090565b600067ffffffffffffffff821115620008ee57620008ed62000aad565b5b620008f98262000adc565b9050602081019050919050565b600082825260208201905092915050565b6000620009248262000935565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200097f57808201518184015260208101905062000962565b838111156200098f576000848401525b50505050565b60006002820490506001821680620009ae57607f821691505b60208210811415620009c557620009c462000a7e565b5b50919050565b620009d68262000adc565b810181811067ffffffffffffffff82111715620009f857620009f762000aad565b5b80604052505050565b600062000a0e8262000955565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000a445762000a4362000a4f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332393831526f79616c746965733a20546f6f2068696768000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b62000b4a8162000917565b811462000b5657600080fd5b50565b62000b64816200092b565b811462000b7057600080fd5b50565b62000b7e8162000955565b811462000b8a57600080fd5b50565b60805160601c60a05160601c615be562000bc7600039600081816118c801526129010152600081816115e201526128c50152615be56000f3fe6080604052600436106102675760003560e01c8063721c492c11610144578063aa3d92fb116100b6578063c87b56dd1161007a578063c87b56dd14610948578063d091350514610985578063d547cfb7146109b0578063e985e9c5146109db578063f2fde38b14610a18578063fdf5a49f14610a4157610267565b8063aa3d92fb14610877578063b2992bb0146108a2578063b88d4fde146108cb578063bedb86fb146108f4578063bf7b766d1461091d57610267565b80638d859f3e116101085780638d859f3e146107675780638da5cb5b1461079257806394985ddd146107bd57806395d89b41146107e6578063967d61d914610811578063a22cb4651461084e57610267565b8063721c492c146106a35780637f81be69146106bf578063853828b6146106fc5780638c7ea24b146107135780638d0419881461073c57610267565b80633502a716116101dd5780634f6ccce7116101a15780634f6ccce7146105815780634f8e2fdf146105be57806355f804b3146105e95780636352211e1461061257806370a082311461064f578063715018a61461068c57610267565b80633502a7161461049a5780633ad10ef6146104c55780633e3ca9d3146104f057806342842e0e1461051b578063438b63001461054457610267565b806323b872dd1161022f57806323b872dd1461036557806326a49e371461038e5780632a55205a146103cb5780632b799146146104095780632f745c591461043257806333b608631461046f57610267565b806301ffc9a71461026c57806306fdde03146102a9578063081812fc146102d4578063095ea7b31461031157806318160ddd1461033a575b600080fd5b34801561027857600080fd5b50610293600480360381019061028e919061425d565b610a6c565b6040516102a09190614a7f565b60405180910390f35b3480156102b557600080fd5b506102be610a7e565b6040516102cb9190614b08565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f691906142f0565b610b10565b604051610308919061498f565b60405180910390f35b34801561031d57600080fd5b5061033860048036038101906103339190614116565b610b95565b005b34801561034657600080fd5b5061034f610cad565b60405161035c9190614eca565b60405180910390f35b34801561037157600080fd5b5061038c60048036038101906103879190614010565b610cba565b005b34801561039a57600080fd5b506103b560048036038101906103b091906142f0565b610d1a565b6040516103c29190614eca565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190614342565b610d3d565b6040516104009291906149f6565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b91906142f0565b610dfd565b005b34801561043e57600080fd5b5061045960048036038101906104549190614116565b610e8b565b6040516104669190614eca565b60405180910390f35b34801561047b57600080fd5b50610484610f30565b604051610491919061498f565b60405180910390f35b3480156104a657600080fd5b506104af610f56565b6040516104bc9190614eca565b60405180910390f35b3480156104d157600080fd5b506104da610f5c565b6040516104e7919061498f565b60405180910390f35b3480156104fc57600080fd5b50610505610f74565b6040516105129190614a7f565b60405180910390f35b34801561052757600080fd5b50610542600480360381019061053d9190614010565b610f8b565b005b34801561055057600080fd5b5061056b60048036038101906105669190613fab565b610fab565b6040516105789190614a5d565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a391906142f0565b6110a5565b6040516105b59190614eca565b60405180910390f35b3480156105ca57600080fd5b506105d361113c565b6040516105e0919061498f565b60405180910390f35b3480156105f557600080fd5b50610610600480360381019061060b91906142af565b611162565b005b34801561061e57600080fd5b50610639600480360381019061063491906142f0565b6111f8565b604051610646919061498f565b60405180910390f35b34801561065b57600080fd5b5061067660048036038101906106719190613fab565b6112aa565b6040516106839190614eca565b60405180910390f35b34801561069857600080fd5b506106a1611362565b005b6106bd60048036038101906106b89190614152565b6113ea565b005b3480156106cb57600080fd5b506106e660048036038101906106e191906142f0565b611764565b6040516106f3919061498f565b60405180910390f35b34801561070857600080fd5b506107116117a1565b005b34801561071f57600080fd5b5061073a60048036038101906107359190614116565b611876565b005b34801561074857600080fd5b50610751611884565b60405161075e9190614eca565b60405180910390f35b34801561077357600080fd5b5061077c611891565b6040516107899190614eca565b60405180910390f35b34801561079e57600080fd5b506107a761189c565b6040516107b4919061498f565b60405180910390f35b3480156107c957600080fd5b506107e460048036038101906107df9190614221565b6118c6565b005b3480156107f257600080fd5b506107fb611962565b6040516108089190614b08565b60405180910390f35b34801561081d57600080fd5b5061083860048036038101906108339190614342565b6119f4565b6040516108459190614a5d565b60405180910390f35b34801561085a57600080fd5b50610875600480360381019061087091906140da565b611b27565b005b34801561088357600080fd5b5061088c611ca8565b604051610899919061498f565b60405180910390f35b3480156108ae57600080fd5b506108c960048036038101906108c4919061418e565b611cc0565b005b3480156108d757600080fd5b506108f260048036038101906108ed919061405f565b611e7d565b005b34801561090057600080fd5b5061091b600480360381019061091691906141cf565b611edf565b005b34801561092957600080fd5b50610932611fbe565b60405161093f9190614eca565b60405180910390f35b34801561095457600080fd5b5061096f600480360381019061096a91906142f0565b611fc3565b60405161097c9190614b08565b60405180910390f35b34801561099157600080fd5b5061099a61206a565b6040516109a7919061498f565b60405180910390f35b3480156109bc57600080fd5b506109c5612082565b6040516109d29190614b08565b60405180910390f35b3480156109e757600080fd5b50610a0260048036038101906109fd9190613fd4565b612110565b604051610a0f9190614a7f565b60405180910390f35b348015610a2457600080fd5b50610a3f6004803603810190610a3a9190613fab565b6121a4565b005b348015610a4d57600080fd5b50610a5661229c565b604051610a639190614eca565b60405180910390f35b6000610a77826122b8565b9050919050565b606060008054610a8d90615235565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab990615235565b8015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b5050505050905090565b6000610b1b82612332565b610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5190614d0a565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610ba0826111f8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0890614dea565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c3061239e565b73ffffffffffffffffffffffffffffffffffffffff161480610c5f5750610c5e81610c5961239e565b612110565b5b610c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9590614c6a565b60405180910390fd5b610ca883836123a6565b505050565b6000600880549050905090565b610ccb610cc561239e565b8261245f565b610d0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0190614e4a565b60405180910390fd5b610d1583838361253d565b505050565b6000610d368266470de4df82000061279990919063ffffffff16565b9050919050565b6000806000600a6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905080600001519250612710816020015162ffffff1685610de991906150a6565b610df39190615075565b9150509250929050565b610e0561239e565b73ffffffffffffffffffffffffffffffffffffffff16610e2361189c565b73ffffffffffffffffffffffffffffffffffffffff1614610e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7090614d2a565b60405180910390fd5b80600d81905550610e886127af565b50565b6000610e96836112aa565b8210610ed7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ece90614b4a565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b7394da7d3d5f83a7253a2b96427d69c971a4bac6df81565b6000601560009054906101000a900460ff16905090565b610fa683838360405180602001604052806000815250611e7d565b505050565b60606000610fb8836112aa565b905060008167ffffffffffffffff811115610ffc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561102a5781602001602082028036833780820191505090505b50905060005b8281101561109a576110428582610e8b565b82828151811061107b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061109290615298565b915050611030565b508092505050919050565b60006110af610cad565b82106110f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e790614e8a565b60405180910390fd5b6008828154811061112a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61116a61239e565b73ffffffffffffffffffffffffffffffffffffffff1661118861189c565b73ffffffffffffffffffffffffffffffffffffffff16146111de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d590614d2a565b60405180910390fd5b80601690805190602001906111f4929190613ce5565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129890614caa565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561131b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131290614c8a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61136a61239e565b73ffffffffffffffffffffffffffffffffffffffff1661138861189c565b73ffffffffffffffffffffffffffffffffffffffff16146113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d590614d2a565b60405180910390fd5b6113e860006127fb565b565b60006113f4611884565b1015611435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142c90614eaa565b60405180910390fd5b601560009054906101000a900460ff1615801561149c5750601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b6114db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d290614e0a565b60405180910390fd5b60006114e561229c565b905060028260ff16111561152e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152590614c2a565b60405180910390fd5b600d548260ff1682611540919061501f565b1115611581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157890614c2a565b60405180910390fd5b61158d8260ff16610d1a565b3410156115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c690614daa565b60405180910390fd5b8160ff16600f546115e091906150a6565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611639919061498f565b60206040518083038186803b15801561165157600080fd5b505afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116899190614319565b10156116ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c190614c0a565b60405180910390fd5b60005b6001836116da9190615134565b60ff168160ff161161175e5760006116f6600e54600f546128c1565b9050846013600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080611756906152e1565b9150506116cd565b50505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6117a961239e565b73ffffffffffffffffffffffffffffffffffffffff166117c761189c565b73ffffffffffffffffffffffffffffffffffffffff161461181d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181490614d2a565b60405180910390fd5b60004790506000811161182f57600080fd5b61187373c09eac15f9ba6462e8e4612af7c431e1cfe08b8761186e606461186060648661279990919063ffffffff16565b612a2390919063ffffffff16565b612a39565b50565b6118808282612aea565b5050565b6000601280549050905090565b66470de4df82000081565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194b90614d8a565b60405180910390fd5b61195e8282612bd4565b5050565b60606001805461197190615235565b80601f016020809104026020016040519081016040528092919081815260200182805461199d90615235565b80156119ea5780601f106119bf576101008083540402835291602001916119ea565b820191906000526020600020905b8154815290600101906020018083116119cd57829003601f168201915b5050505050905090565b606060008267ffffffffffffffff811115611a38577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611a665781602001602082028036833780820191505090505b50905060005b83811015611b1c5760008582611a82919061501f565b9050600073ffffffffffffffffffffffffffffffffffffffff16611aa582611764565b73ffffffffffffffffffffffffffffffffffffffff161415611b085780838381518110611afb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505b508080611b1490615298565b915050611a6c565b508091505092915050565b611b2f61239e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9490614bea565b60405180910390fd5b8060056000611baa61239e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611c5761239e565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c9c9190614a7f565b60405180910390a35050565b73c09eac15f9ba6462e8e4612af7c431e1cfe08b8781565b611cc861239e565b73ffffffffffffffffffffffffffffffffffffffff16611ce661189c565b73ffffffffffffffffffffffffffffffffffffffff1614611d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3390614d2a565b60405180910390fd5b601560009054906101000a900460ff16611d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8290614dca565b60405180910390fd5b60005b8151811015611e7957600073ffffffffffffffffffffffffffffffffffffffff16611df8838381518110611deb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611764565b73ffffffffffffffffffffffffffffffffffffffff161415611e6657611e65611e1f61189c565b838381518110611e58577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612cf4565b5b8080611e7190615298565b915050611d8e565b5050565b611e8e611e8861239e565b8361245f565b611ecd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec490614e4a565b60405180910390fd5b611ed984848484612d50565b50505050565b611ee761239e565b73ffffffffffffffffffffffffffffffffffffffff16611f0561189c565b73ffffffffffffffffffffffffffffffffffffffff1614611f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5290614d2a565b60405180910390fd5b80601560006101000a81548160ff0219169083151502179055507f10e1c3fcaff06b68391033547e8f9bb8067d7c4a2e32659b0629153814d242d3601560009054906101000a900460ff16604051611fb39190614a7f565b60405180910390a150565b600181565b6060611fce82612332565b61200d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200490614d6a565b60405180910390fd5b6000612017612dac565b905060008151116120375760405180602001604052806000815250612062565b8061204184612e3e565b604051602001612052929190614956565b6040516020818303038152906040525b915050919050565b735db342fb039c1c85bec5fe89af6734621f421d8481565b6016805461208f90615235565b80601f01602080910402602001604051908101604052809291908181526020018280546120bb90615235565b80156121085780601f106120dd57610100808354040283529160200191612108565b820191906000526020600020905b8154815290600101906020018083116120eb57829003601f168201915b505050505081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6121ac61239e565b73ffffffffffffffffffffffffffffffffffffffff166121ca61189c565b73ffffffffffffffffffffffffffffffffffffffff1614612220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221790614d2a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612290576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228790614b8a565b60405180910390fd5b612299816127fb565b50565b60006122a6611884565b600d546122b39190615100565b905090565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061232b575061232a82612feb565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612419836111f8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061246a82612332565b6124a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a090614c4a565b60405180910390fd5b60006124b4836111f8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061252357508373ffffffffffffffffffffffffffffffffffffffff1661250b84610b10565b73ffffffffffffffffffffffffffffffffffffffff16145b8061253457506125338185612110565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661255d826111f8565b73ffffffffffffffffffffffffffffffffffffffff16146125b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125aa90614d4a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261a90614bca565b60405180910390fd5b61262e838383613065565b6126396000826123a6565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126899190615100565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126e0919061501f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081836127a791906150a6565b905092915050565b60005b600d548110156127f857601281908060018154018082558091505060019003906000526020600020016000909190919091505580806127f090615298565b9150506127b2565b50565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001612935929190614a9a565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161296293929190614a1f565b602060405180830381600087803b15801561297c57600080fd5b505af1158015612990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b491906141f8565b5060006129d784600030600b600089815260200190815260200160002054613179565b90506001600b6000868152602001908152602001600020546129f9919061501f565b600b600086815260200190815260200160002081905550612a1a84826131b5565b91505092915050565b60008183612a319190615075565b905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051612a5f9061497a565b60006040518083038185875af1925050503d8060008114612a9c576040519150601f19603f3d011682016040523d82523d6000602084013e612aa1565b606091505b5050905080612ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612adc90614e2a565b60405180910390fd5b505050565b612710811115612b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2690614b2a565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff16815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548162ffffff021916908362ffffff1602179055509050505050565b600060128054905082612be7919061531f565b905060006013600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612c6f8160128481548110612c5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546131e8565b6000612c79611884565b90506000811115612cc0577fa650fd68254e5b4ec12085cac5ab4db28cbd9fe57bc98b366fbd4d91ab55c14881604051612cb39190614eca565b60405180910390a1612ced565b7f52df9fe5b9c9a7b0b4fdc2c9f89387959e35e4209c2a8d133a2b8165edad2a0460405160405180910390a15b5050505050565b612cfe82826131ff565b8173ffffffffffffffffffffffffffffffffffffffff167f07084d10de365e4fe4f6861261b5f1fc13cea244b38301f31d2ff67e1cb92de282604051612d449190614eca565b60405180910390a25050565b612d5b84848461253d565b612d678484848461321d565b612da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9d90614b6a565b60405180910390fd5b50505050565b606060168054612dbb90615235565b80601f0160208091040260200160405190810160405280929190818152602001828054612de790615235565b8015612e345780601f10612e0957610100808354040283529160200191612e34565b820191906000526020600020905b815481529060010190602001808311612e1757829003601f168201915b5050505050905090565b60606000821415612e86576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612fe6565b600082905060005b60008214612eb8578080612ea190615298565b915050600a82612eb19190615075565b9150612e8e565b60008167ffffffffffffffff811115612efa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612f2c5781602001600182028036833780820191505090505b5090505b60008514612fdf57600182612f459190615100565b9150600a85612f54919061531f565b6030612f60919061501f565b60f81b818381518110612f9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612fd89190615075565b9450612f30565b8093505050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061305e575061305d826133b4565b5b9050919050565b613070838383613496565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156130b3576130ae8161349b565b6130f2565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146130f1576130f083826134e4565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156131355761313081613651565b613174565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613173576131728282613794565b5b5b505050565b6000848484846040516020016131929493929190614ac3565b6040516020818303038152906040528051906020012060001c9050949350505050565b600082826040516020016131ca92919061492a565b60405160208183030381529060405280519060200120905092915050565b6131f28282612cf4565b6131fb81613813565b5050565b6132198282604051806020016040528060008152506139a0565b5050565b600061323e8473ffffffffffffffffffffffffffffffffffffffff166139fb565b156133a7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261326761239e565b8786866040518563ffffffff1660e01b815260040161328994939291906149aa565b602060405180830381600087803b1580156132a357600080fd5b505af19250505080156132d457506040513d601f19601f820116820180604052508101906132d19190614286565b60015b613357573d8060008114613304576040519150601f19603f3d011682016040523d82523d6000602084013e613309565b606091505b5060008151141561334f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334690614b6a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506133ac565b600190505b949350505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061347f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061348f575061348e82613a0e565b5b9050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016134f1846112aa565b6134fb9190615100565b90506000600760008481526020019081526020016000205490508181146135e0576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506136659190615100565b90506000600960008481526020019081526020016000205490506000600883815481106136bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110613703577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613778577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061379f836112aa565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b60006012805490501161385b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161385290614cca565b60405180910390fd5b600061386682613a78565b90506012805490508111156138b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138a790614e6a565b60405180910390fd5b601260016012805490506138c49190615100565b815481106138fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015460128281548110613940577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055506012805480613986577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590555050565b6139aa8383613b17565b6139b7600084848461321d565b6139f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139ed90614b6a565b60405180910390fd5b505050565b600080823b905060008111915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600090505b601280549050811015613afc57600060128281548110613ac9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905083811415613ae8578192505050613b12565b508080613af490615298565b915050613a80565b506064601280549050613b0f919061501f565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b7e90614cea565b60405180910390fd5b613b9081612332565b15613bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bc790614baa565b60405180910390fd5b613bdc60008383613065565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613c2c919061501f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054613cf190615235565b90600052602060002090601f016020900481019282613d135760008555613d5a565b82601f10613d2c57805160ff1916838001178555613d5a565b82800160010185558215613d5a579182015b82811115613d59578251825591602001919060010190613d3e565b5b509050613d679190613d6b565b5090565b5b80821115613d84576000816000905550600101613d6c565b5090565b6000613d9b613d9684614f0a565b614ee5565b90508083825260208201905082856020860282011115613dba57600080fd5b60005b85811015613dea5781613dd08882613f6c565b845260208401935060208301925050600181019050613dbd565b5050509392505050565b6000613e07613e0284614f36565b614ee5565b905082815260208101848484011115613e1f57600080fd5b613e2a8482856151f3565b509392505050565b6000613e45613e4084614f67565b614ee5565b905082815260208101848484011115613e5d57600080fd5b613e688482856151f3565b509392505050565b600081359050613e7f81615b25565b92915050565b600082601f830112613e9657600080fd5b8135613ea6848260208601613d88565b91505092915050565b600081359050613ebe81615b3c565b92915050565b600081519050613ed381615b3c565b92915050565b600081359050613ee881615b53565b92915050565b600081359050613efd81615b6a565b92915050565b600081519050613f1281615b6a565b92915050565b600082601f830112613f2957600080fd5b8135613f39848260208601613df4565b91505092915050565b600082601f830112613f5357600080fd5b8135613f63848260208601613e32565b91505092915050565b600081359050613f7b81615b81565b92915050565b600081519050613f9081615b81565b92915050565b600081359050613fa581615b98565b92915050565b600060208284031215613fbd57600080fd5b6000613fcb84828501613e70565b91505092915050565b60008060408385031215613fe757600080fd5b6000613ff585828601613e70565b925050602061400685828601613e70565b9150509250929050565b60008060006060848603121561402557600080fd5b600061403386828701613e70565b935050602061404486828701613e70565b925050604061405586828701613f6c565b9150509250925092565b6000806000806080858703121561407557600080fd5b600061408387828801613e70565b945050602061409487828801613e70565b93505060406140a587828801613f6c565b925050606085013567ffffffffffffffff8111156140c257600080fd5b6140ce87828801613f18565b91505092959194509250565b600080604083850312156140ed57600080fd5b60006140fb85828601613e70565b925050602061410c85828601613eaf565b9150509250929050565b6000806040838503121561412957600080fd5b600061413785828601613e70565b925050602061414885828601613f6c565b9150509250929050565b6000806040838503121561416557600080fd5b600061417385828601613e70565b925050602061418485828601613f96565b9150509250929050565b6000602082840312156141a057600080fd5b600082013567ffffffffffffffff8111156141ba57600080fd5b6141c684828501613e85565b91505092915050565b6000602082840312156141e157600080fd5b60006141ef84828501613eaf565b91505092915050565b60006020828403121561420a57600080fd5b600061421884828501613ec4565b91505092915050565b6000806040838503121561423457600080fd5b600061424285828601613ed9565b925050602061425385828601613f6c565b9150509250929050565b60006020828403121561426f57600080fd5b600061427d84828501613eee565b91505092915050565b60006020828403121561429857600080fd5b60006142a684828501613f03565b91505092915050565b6000602082840312156142c157600080fd5b600082013567ffffffffffffffff8111156142db57600080fd5b6142e784828501613f42565b91505092915050565b60006020828403121561430257600080fd5b600061431084828501613f6c565b91505092915050565b60006020828403121561432b57600080fd5b600061433984828501613f81565b91505092915050565b6000806040838503121561435557600080fd5b600061436385828601613f6c565b925050602061437485828601613f6c565b9150509250929050565b600061438a83836148f5565b60208301905092915050565b61439f81615168565b82525050565b60006143b082614fa8565b6143ba8185614fd6565b93506143c583614f98565b8060005b838110156143f65781516143dd888261437e565b97506143e883614fc9565b9250506001810190506143c9565b5085935050505092915050565b61440c8161517a565b82525050565b61441b81615186565b82525050565b61443261442d82615186565b61530b565b82525050565b600061444382614fb3565b61444d8185614fe7565b935061445d818560208601615202565b6144668161540c565b840191505092915050565b600061447c82614fbe565b6144868185615003565b9350614496818560208601615202565b61449f8161540c565b840191505092915050565b60006144b582614fbe565b6144bf8185615014565b93506144cf818560208601615202565b80840191505092915050565b60006144e8601a83615003565b91506144f38261541d565b602082019050919050565b600061450b602b83615003565b915061451682615446565b604082019050919050565b600061452e603283615003565b915061453982615495565b604082019050919050565b6000614551602683615003565b915061455c826154e4565b604082019050919050565b6000614574601c83615003565b915061457f82615533565b602082019050919050565b6000614597602483615003565b91506145a28261555c565b604082019050919050565b60006145ba601983615003565b91506145c5826155ab565b602082019050919050565b60006145dd602b83615003565b91506145e8826155d4565b604082019050919050565b6000614600600983615003565b915061460b82615623565b602082019050919050565b6000614623602c83615003565b915061462e8261564c565b604082019050919050565b6000614646603883615003565b91506146518261569b565b604082019050919050565b6000614669602a83615003565b9150614674826156ea565b604082019050919050565b600061468c602983615003565b915061469782615739565b604082019050919050565b60006146af601183615003565b91506146ba82615788565b602082019050919050565b60006146d2602083615003565b91506146dd826157b1565b602082019050919050565b60006146f5602c83615003565b9150614700826157da565b604082019050919050565b6000614718602083615003565b915061472382615829565b602082019050919050565b600061473b602983615003565b915061474682615852565b604082019050919050565b600061475e602f83615003565b9150614769826158a1565b604082019050919050565b6000614781601f83615003565b915061478c826158f0565b602082019050919050565b60006147a4601183615003565b91506147af82615919565b602082019050919050565b60006147c7601083615003565b91506147d282615942565b602082019050919050565b60006147ea602183615003565b91506147f58261596b565b604082019050919050565b600061480d600e83615003565b9150614818826159ba565b602082019050919050565b6000614830600083614ff8565b915061483b826159e3565b600082019050919050565b6000614853601083615003565b915061485e826159e6565b602082019050919050565b6000614876603183615003565b915061488182615a0f565b604082019050919050565b6000614899602a83615003565b91506148a482615a5e565b604082019050919050565b60006148bc602c83615003565b91506148c782615aad565b604082019050919050565b60006148df600883615003565b91506148ea82615afc565b602082019050919050565b6148fe816151dc565b82525050565b61490d816151dc565b82525050565b61492461491f826151dc565b615315565b82525050565b60006149368285614421565b6020820191506149468284614913565b6020820191508190509392505050565b600061496282856144aa565b915061496e82846144aa565b91508190509392505050565b600061498582614823565b9150819050919050565b60006020820190506149a46000830184614396565b92915050565b60006080820190506149bf6000830187614396565b6149cc6020830186614396565b6149d96040830185614904565b81810360608301526149eb8184614438565b905095945050505050565b6000604082019050614a0b6000830185614396565b614a186020830184614904565b9392505050565b6000606082019050614a346000830186614396565b614a416020830185614904565b8181036040830152614a538184614438565b9050949350505050565b60006020820190508181036000830152614a7781846143a5565b905092915050565b6000602082019050614a946000830184614403565b92915050565b6000604082019050614aaf6000830185614412565b614abc6020830184614904565b9392505050565b6000608082019050614ad86000830187614412565b614ae56020830186614904565b614af26040830185614396565b614aff6060830184614904565b95945050505050565b60006020820190508181036000830152614b228184614471565b905092915050565b60006020820190508181036000830152614b43816144db565b9050919050565b60006020820190508181036000830152614b63816144fe565b9050919050565b60006020820190508181036000830152614b8381614521565b9050919050565b60006020820190508181036000830152614ba381614544565b9050919050565b60006020820190508181036000830152614bc381614567565b9050919050565b60006020820190508181036000830152614be38161458a565b9050919050565b60006020820190508181036000830152614c03816145ad565b9050919050565b60006020820190508181036000830152614c23816145d0565b9050919050565b60006020820190508181036000830152614c43816145f3565b9050919050565b60006020820190508181036000830152614c6381614616565b9050919050565b60006020820190508181036000830152614c8381614639565b9050919050565b60006020820190508181036000830152614ca38161465c565b9050919050565b60006020820190508181036000830152614cc38161467f565b9050919050565b60006020820190508181036000830152614ce3816146a2565b9050919050565b60006020820190508181036000830152614d03816146c5565b9050919050565b60006020820190508181036000830152614d23816146e8565b9050919050565b60006020820190508181036000830152614d438161470b565b9050919050565b60006020820190508181036000830152614d638161472e565b9050919050565b60006020820190508181036000830152614d8381614751565b9050919050565b60006020820190508181036000830152614da381614774565b9050919050565b60006020820190508181036000830152614dc381614797565b9050919050565b60006020820190508181036000830152614de3816147ba565b9050919050565b60006020820190508181036000830152614e03816147dd565b9050919050565b60006020820190508181036000830152614e2381614800565b9050919050565b60006020820190508181036000830152614e4381614846565b9050919050565b60006020820190508181036000830152614e6381614869565b9050919050565b60006020820190508181036000830152614e838161488c565b9050919050565b60006020820190508181036000830152614ea3816148af565b9050919050565b60006020820190508181036000830152614ec3816148d2565b9050919050565b6000602082019050614edf6000830184614904565b92915050565b6000614eef614f00565b9050614efb8282615267565b919050565b6000604051905090565b600067ffffffffffffffff821115614f2557614f246153dd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614f5157614f506153dd565b5b614f5a8261540c565b9050602081019050919050565b600067ffffffffffffffff821115614f8257614f816153dd565b5b614f8b8261540c565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061502a826151dc565b9150615035836151dc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561506a57615069615350565b5b828201905092915050565b6000615080826151dc565b915061508b836151dc565b92508261509b5761509a61537f565b5b828204905092915050565b60006150b1826151dc565b91506150bc836151dc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156150f5576150f4615350565b5b828202905092915050565b600061510b826151dc565b9150615116836151dc565b92508282101561512957615128615350565b5b828203905092915050565b600061513f826151e6565b915061514a836151e6565b92508282101561515d5761515c615350565b5b828203905092915050565b6000615173826151bc565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015615220578082015181840152602081019050615205565b8381111561522f576000848401525b50505050565b6000600282049050600182168061524d57607f821691505b60208210811415615261576152606153ae565b5b50919050565b6152708261540c565b810181811067ffffffffffffffff8211171561528f5761528e6153dd565b5b80604052505050565b60006152a3826151dc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156152d6576152d5615350565b5b600182019050919050565b60006152ec826151e6565b915060ff821415615300576152ff615350565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061532a826151dc565b9150615335836151dc565b9250826153455761534461537f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332393831526f79616c746965733a20546f6f2068696768000000000000600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060008201527f7769746820666175636574000000000000000000000000000000000000000000602082015250565b7f4d6178206c696d69740000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f746f6b656e49647320697320656d707479000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f56616c75652062656c6f77207072696365000000000000000000000000000000600082015250565b7f50617573652069732064697361626c6500000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f53616c6573206e6f74206f70656e000000000000000000000000000000000000600082015250565b50565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f43616e6e6f742066696e6420746f6b656e49647320496e646578202d2072656d60008201527f6f7665546f6b656e496400000000000000000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f536f6c646f757421000000000000000000000000000000000000000000000000600082015250565b615b2e81615168565b8114615b3957600080fd5b50565b615b458161517a565b8114615b5057600080fd5b50565b615b5c81615186565b8114615b6757600080fd5b50565b615b7381615190565b8114615b7e57600080fd5b50565b615b8a816151dc565b8114615b9557600080fd5b50565b615ba1816151e6565b8114615bac57600080fd5b5056fea2646970667358221220673cc12a54cf0639fed64d669df8bf53723108c92c147e9528bb78068568d88964736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102675760003560e01c8063721c492c11610144578063aa3d92fb116100b6578063c87b56dd1161007a578063c87b56dd14610948578063d091350514610985578063d547cfb7146109b0578063e985e9c5146109db578063f2fde38b14610a18578063fdf5a49f14610a4157610267565b8063aa3d92fb14610877578063b2992bb0146108a2578063b88d4fde146108cb578063bedb86fb146108f4578063bf7b766d1461091d57610267565b80638d859f3e116101085780638d859f3e146107675780638da5cb5b1461079257806394985ddd146107bd57806395d89b41146107e6578063967d61d914610811578063a22cb4651461084e57610267565b8063721c492c146106a35780637f81be69146106bf578063853828b6146106fc5780638c7ea24b146107135780638d0419881461073c57610267565b80633502a716116101dd5780634f6ccce7116101a15780634f6ccce7146105815780634f8e2fdf146105be57806355f804b3146105e95780636352211e1461061257806370a082311461064f578063715018a61461068c57610267565b80633502a7161461049a5780633ad10ef6146104c55780633e3ca9d3146104f057806342842e0e1461051b578063438b63001461054457610267565b806323b872dd1161022f57806323b872dd1461036557806326a49e371461038e5780632a55205a146103cb5780632b799146146104095780632f745c591461043257806333b608631461046f57610267565b806301ffc9a71461026c57806306fdde03146102a9578063081812fc146102d4578063095ea7b31461031157806318160ddd1461033a575b600080fd5b34801561027857600080fd5b50610293600480360381019061028e919061425d565b610a6c565b6040516102a09190614a7f565b60405180910390f35b3480156102b557600080fd5b506102be610a7e565b6040516102cb9190614b08565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f691906142f0565b610b10565b604051610308919061498f565b60405180910390f35b34801561031d57600080fd5b5061033860048036038101906103339190614116565b610b95565b005b34801561034657600080fd5b5061034f610cad565b60405161035c9190614eca565b60405180910390f35b34801561037157600080fd5b5061038c60048036038101906103879190614010565b610cba565b005b34801561039a57600080fd5b506103b560048036038101906103b091906142f0565b610d1a565b6040516103c29190614eca565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190614342565b610d3d565b6040516104009291906149f6565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b91906142f0565b610dfd565b005b34801561043e57600080fd5b5061045960048036038101906104549190614116565b610e8b565b6040516104669190614eca565b60405180910390f35b34801561047b57600080fd5b50610484610f30565b604051610491919061498f565b60405180910390f35b3480156104a657600080fd5b506104af610f56565b6040516104bc9190614eca565b60405180910390f35b3480156104d157600080fd5b506104da610f5c565b6040516104e7919061498f565b60405180910390f35b3480156104fc57600080fd5b50610505610f74565b6040516105129190614a7f565b60405180910390f35b34801561052757600080fd5b50610542600480360381019061053d9190614010565b610f8b565b005b34801561055057600080fd5b5061056b60048036038101906105669190613fab565b610fab565b6040516105789190614a5d565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a391906142f0565b6110a5565b6040516105b59190614eca565b60405180910390f35b3480156105ca57600080fd5b506105d361113c565b6040516105e0919061498f565b60405180910390f35b3480156105f557600080fd5b50610610600480360381019061060b91906142af565b611162565b005b34801561061e57600080fd5b50610639600480360381019061063491906142f0565b6111f8565b604051610646919061498f565b60405180910390f35b34801561065b57600080fd5b5061067660048036038101906106719190613fab565b6112aa565b6040516106839190614eca565b60405180910390f35b34801561069857600080fd5b506106a1611362565b005b6106bd60048036038101906106b89190614152565b6113ea565b005b3480156106cb57600080fd5b506106e660048036038101906106e191906142f0565b611764565b6040516106f3919061498f565b60405180910390f35b34801561070857600080fd5b506107116117a1565b005b34801561071f57600080fd5b5061073a60048036038101906107359190614116565b611876565b005b34801561074857600080fd5b50610751611884565b60405161075e9190614eca565b60405180910390f35b34801561077357600080fd5b5061077c611891565b6040516107899190614eca565b60405180910390f35b34801561079e57600080fd5b506107a761189c565b6040516107b4919061498f565b60405180910390f35b3480156107c957600080fd5b506107e460048036038101906107df9190614221565b6118c6565b005b3480156107f257600080fd5b506107fb611962565b6040516108089190614b08565b60405180910390f35b34801561081d57600080fd5b5061083860048036038101906108339190614342565b6119f4565b6040516108459190614a5d565b60405180910390f35b34801561085a57600080fd5b50610875600480360381019061087091906140da565b611b27565b005b34801561088357600080fd5b5061088c611ca8565b604051610899919061498f565b60405180910390f35b3480156108ae57600080fd5b506108c960048036038101906108c4919061418e565b611cc0565b005b3480156108d757600080fd5b506108f260048036038101906108ed919061405f565b611e7d565b005b34801561090057600080fd5b5061091b600480360381019061091691906141cf565b611edf565b005b34801561092957600080fd5b50610932611fbe565b60405161093f9190614eca565b60405180910390f35b34801561095457600080fd5b5061096f600480360381019061096a91906142f0565b611fc3565b60405161097c9190614b08565b60405180910390f35b34801561099157600080fd5b5061099a61206a565b6040516109a7919061498f565b60405180910390f35b3480156109bc57600080fd5b506109c5612082565b6040516109d29190614b08565b60405180910390f35b3480156109e757600080fd5b50610a0260048036038101906109fd9190613fd4565b612110565b604051610a0f9190614a7f565b60405180910390f35b348015610a2457600080fd5b50610a3f6004803603810190610a3a9190613fab565b6121a4565b005b348015610a4d57600080fd5b50610a5661229c565b604051610a639190614eca565b60405180910390f35b6000610a77826122b8565b9050919050565b606060008054610a8d90615235565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab990615235565b8015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b5050505050905090565b6000610b1b82612332565b610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5190614d0a565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610ba0826111f8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0890614dea565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c3061239e565b73ffffffffffffffffffffffffffffffffffffffff161480610c5f5750610c5e81610c5961239e565b612110565b5b610c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9590614c6a565b60405180910390fd5b610ca883836123a6565b505050565b6000600880549050905090565b610ccb610cc561239e565b8261245f565b610d0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0190614e4a565b60405180910390fd5b610d1583838361253d565b505050565b6000610d368266470de4df82000061279990919063ffffffff16565b9050919050565b6000806000600a6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905080600001519250612710816020015162ffffff1685610de991906150a6565b610df39190615075565b9150509250929050565b610e0561239e565b73ffffffffffffffffffffffffffffffffffffffff16610e2361189c565b73ffffffffffffffffffffffffffffffffffffffff1614610e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7090614d2a565b60405180910390fd5b80600d81905550610e886127af565b50565b6000610e96836112aa565b8210610ed7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ece90614b4a565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b7394da7d3d5f83a7253a2b96427d69c971a4bac6df81565b6000601560009054906101000a900460ff16905090565b610fa683838360405180602001604052806000815250611e7d565b505050565b60606000610fb8836112aa565b905060008167ffffffffffffffff811115610ffc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561102a5781602001602082028036833780820191505090505b50905060005b8281101561109a576110428582610e8b565b82828151811061107b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061109290615298565b915050611030565b508092505050919050565b60006110af610cad565b82106110f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e790614e8a565b60405180910390fd5b6008828154811061112a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61116a61239e565b73ffffffffffffffffffffffffffffffffffffffff1661118861189c565b73ffffffffffffffffffffffffffffffffffffffff16146111de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d590614d2a565b60405180910390fd5b80601690805190602001906111f4929190613ce5565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129890614caa565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561131b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131290614c8a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61136a61239e565b73ffffffffffffffffffffffffffffffffffffffff1661138861189c565b73ffffffffffffffffffffffffffffffffffffffff16146113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d590614d2a565b60405180910390fd5b6113e860006127fb565b565b60006113f4611884565b1015611435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142c90614eaa565b60405180910390fd5b601560009054906101000a900460ff1615801561149c5750601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b6114db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d290614e0a565b60405180910390fd5b60006114e561229c565b905060028260ff16111561152e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152590614c2a565b60405180910390fd5b600d548260ff1682611540919061501f565b1115611581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157890614c2a565b60405180910390fd5b61158d8260ff16610d1a565b3410156115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c690614daa565b60405180910390fd5b8160ff16600f546115e091906150a6565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611639919061498f565b60206040518083038186803b15801561165157600080fd5b505afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116899190614319565b10156116ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c190614c0a565b60405180910390fd5b60005b6001836116da9190615134565b60ff168160ff161161175e5760006116f6600e54600f546128c1565b9050846013600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080611756906152e1565b9150506116cd565b50505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6117a961239e565b73ffffffffffffffffffffffffffffffffffffffff166117c761189c565b73ffffffffffffffffffffffffffffffffffffffff161461181d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181490614d2a565b60405180910390fd5b60004790506000811161182f57600080fd5b61187373c09eac15f9ba6462e8e4612af7c431e1cfe08b8761186e606461186060648661279990919063ffffffff16565b612a2390919063ffffffff16565b612a39565b50565b6118808282612aea565b5050565b6000601280549050905090565b66470de4df82000081565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194b90614d8a565b60405180910390fd5b61195e8282612bd4565b5050565b60606001805461197190615235565b80601f016020809104026020016040519081016040528092919081815260200182805461199d90615235565b80156119ea5780601f106119bf576101008083540402835291602001916119ea565b820191906000526020600020905b8154815290600101906020018083116119cd57829003601f168201915b5050505050905090565b606060008267ffffffffffffffff811115611a38577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611a665781602001602082028036833780820191505090505b50905060005b83811015611b1c5760008582611a82919061501f565b9050600073ffffffffffffffffffffffffffffffffffffffff16611aa582611764565b73ffffffffffffffffffffffffffffffffffffffff161415611b085780838381518110611afb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505b508080611b1490615298565b915050611a6c565b508091505092915050565b611b2f61239e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9490614bea565b60405180910390fd5b8060056000611baa61239e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611c5761239e565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c9c9190614a7f565b60405180910390a35050565b73c09eac15f9ba6462e8e4612af7c431e1cfe08b8781565b611cc861239e565b73ffffffffffffffffffffffffffffffffffffffff16611ce661189c565b73ffffffffffffffffffffffffffffffffffffffff1614611d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3390614d2a565b60405180910390fd5b601560009054906101000a900460ff16611d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8290614dca565b60405180910390fd5b60005b8151811015611e7957600073ffffffffffffffffffffffffffffffffffffffff16611df8838381518110611deb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611764565b73ffffffffffffffffffffffffffffffffffffffff161415611e6657611e65611e1f61189c565b838381518110611e58577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612cf4565b5b8080611e7190615298565b915050611d8e565b5050565b611e8e611e8861239e565b8361245f565b611ecd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec490614e4a565b60405180910390fd5b611ed984848484612d50565b50505050565b611ee761239e565b73ffffffffffffffffffffffffffffffffffffffff16611f0561189c565b73ffffffffffffffffffffffffffffffffffffffff1614611f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5290614d2a565b60405180910390fd5b80601560006101000a81548160ff0219169083151502179055507f10e1c3fcaff06b68391033547e8f9bb8067d7c4a2e32659b0629153814d242d3601560009054906101000a900460ff16604051611fb39190614a7f565b60405180910390a150565b600181565b6060611fce82612332565b61200d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200490614d6a565b60405180910390fd5b6000612017612dac565b905060008151116120375760405180602001604052806000815250612062565b8061204184612e3e565b604051602001612052929190614956565b6040516020818303038152906040525b915050919050565b735db342fb039c1c85bec5fe89af6734621f421d8481565b6016805461208f90615235565b80601f01602080910402602001604051908101604052809291908181526020018280546120bb90615235565b80156121085780601f106120dd57610100808354040283529160200191612108565b820191906000526020600020905b8154815290600101906020018083116120eb57829003601f168201915b505050505081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6121ac61239e565b73ffffffffffffffffffffffffffffffffffffffff166121ca61189c565b73ffffffffffffffffffffffffffffffffffffffff1614612220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221790614d2a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612290576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228790614b8a565b60405180910390fd5b612299816127fb565b50565b60006122a6611884565b600d546122b39190615100565b905090565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061232b575061232a82612feb565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612419836111f8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061246a82612332565b6124a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a090614c4a565b60405180910390fd5b60006124b4836111f8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061252357508373ffffffffffffffffffffffffffffffffffffffff1661250b84610b10565b73ffffffffffffffffffffffffffffffffffffffff16145b8061253457506125338185612110565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661255d826111f8565b73ffffffffffffffffffffffffffffffffffffffff16146125b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125aa90614d4a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261a90614bca565b60405180910390fd5b61262e838383613065565b6126396000826123a6565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126899190615100565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126e0919061501f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081836127a791906150a6565b905092915050565b60005b600d548110156127f857601281908060018154018082558091505060019003906000526020600020016000909190919091505580806127f090615298565b9150506127b2565b50565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001612935929190614a9a565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161296293929190614a1f565b602060405180830381600087803b15801561297c57600080fd5b505af1158015612990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b491906141f8565b5060006129d784600030600b600089815260200190815260200160002054613179565b90506001600b6000868152602001908152602001600020546129f9919061501f565b600b600086815260200190815260200160002081905550612a1a84826131b5565b91505092915050565b60008183612a319190615075565b905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051612a5f9061497a565b60006040518083038185875af1925050503d8060008114612a9c576040519150601f19603f3d011682016040523d82523d6000602084013e612aa1565b606091505b5050905080612ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612adc90614e2a565b60405180910390fd5b505050565b612710811115612b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2690614b2a565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff16815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548162ffffff021916908362ffffff1602179055509050505050565b600060128054905082612be7919061531f565b905060006013600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612c6f8160128481548110612c5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546131e8565b6000612c79611884565b90506000811115612cc0577fa650fd68254e5b4ec12085cac5ab4db28cbd9fe57bc98b366fbd4d91ab55c14881604051612cb39190614eca565b60405180910390a1612ced565b7f52df9fe5b9c9a7b0b4fdc2c9f89387959e35e4209c2a8d133a2b8165edad2a0460405160405180910390a15b5050505050565b612cfe82826131ff565b8173ffffffffffffffffffffffffffffffffffffffff167f07084d10de365e4fe4f6861261b5f1fc13cea244b38301f31d2ff67e1cb92de282604051612d449190614eca565b60405180910390a25050565b612d5b84848461253d565b612d678484848461321d565b612da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9d90614b6a565b60405180910390fd5b50505050565b606060168054612dbb90615235565b80601f0160208091040260200160405190810160405280929190818152602001828054612de790615235565b8015612e345780601f10612e0957610100808354040283529160200191612e34565b820191906000526020600020905b815481529060010190602001808311612e1757829003601f168201915b5050505050905090565b60606000821415612e86576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612fe6565b600082905060005b60008214612eb8578080612ea190615298565b915050600a82612eb19190615075565b9150612e8e565b60008167ffffffffffffffff811115612efa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612f2c5781602001600182028036833780820191505090505b5090505b60008514612fdf57600182612f459190615100565b9150600a85612f54919061531f565b6030612f60919061501f565b60f81b818381518110612f9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612fd89190615075565b9450612f30565b8093505050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061305e575061305d826133b4565b5b9050919050565b613070838383613496565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156130b3576130ae8161349b565b6130f2565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146130f1576130f083826134e4565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156131355761313081613651565b613174565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613173576131728282613794565b5b5b505050565b6000848484846040516020016131929493929190614ac3565b6040516020818303038152906040528051906020012060001c9050949350505050565b600082826040516020016131ca92919061492a565b60405160208183030381529060405280519060200120905092915050565b6131f28282612cf4565b6131fb81613813565b5050565b6132198282604051806020016040528060008152506139a0565b5050565b600061323e8473ffffffffffffffffffffffffffffffffffffffff166139fb565b156133a7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261326761239e565b8786866040518563ffffffff1660e01b815260040161328994939291906149aa565b602060405180830381600087803b1580156132a357600080fd5b505af19250505080156132d457506040513d601f19601f820116820180604052508101906132d19190614286565b60015b613357573d8060008114613304576040519150601f19603f3d011682016040523d82523d6000602084013e613309565b606091505b5060008151141561334f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334690614b6a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506133ac565b600190505b949350505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061347f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061348f575061348e82613a0e565b5b9050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016134f1846112aa565b6134fb9190615100565b90506000600760008481526020019081526020016000205490508181146135e0576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506136659190615100565b90506000600960008481526020019081526020016000205490506000600883815481106136bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110613703577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613778577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061379f836112aa565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b60006012805490501161385b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161385290614cca565b60405180910390fd5b600061386682613a78565b90506012805490508111156138b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138a790614e6a565b60405180910390fd5b601260016012805490506138c49190615100565b815481106138fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015460128281548110613940577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055506012805480613986577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590555050565b6139aa8383613b17565b6139b7600084848461321d565b6139f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139ed90614b6a565b60405180910390fd5b505050565b600080823b905060008111915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600090505b601280549050811015613afc57600060128281548110613ac9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905083811415613ae8578192505050613b12565b508080613af490615298565b915050613a80565b506064601280549050613b0f919061501f565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b7e90614cea565b60405180910390fd5b613b9081612332565b15613bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bc790614baa565b60405180910390fd5b613bdc60008383613065565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613c2c919061501f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054613cf190615235565b90600052602060002090601f016020900481019282613d135760008555613d5a565b82601f10613d2c57805160ff1916838001178555613d5a565b82800160010185558215613d5a579182015b82811115613d59578251825591602001919060010190613d3e565b5b509050613d679190613d6b565b5090565b5b80821115613d84576000816000905550600101613d6c565b5090565b6000613d9b613d9684614f0a565b614ee5565b90508083825260208201905082856020860282011115613dba57600080fd5b60005b85811015613dea5781613dd08882613f6c565b845260208401935060208301925050600181019050613dbd565b5050509392505050565b6000613e07613e0284614f36565b614ee5565b905082815260208101848484011115613e1f57600080fd5b613e2a8482856151f3565b509392505050565b6000613e45613e4084614f67565b614ee5565b905082815260208101848484011115613e5d57600080fd5b613e688482856151f3565b509392505050565b600081359050613e7f81615b25565b92915050565b600082601f830112613e9657600080fd5b8135613ea6848260208601613d88565b91505092915050565b600081359050613ebe81615b3c565b92915050565b600081519050613ed381615b3c565b92915050565b600081359050613ee881615b53565b92915050565b600081359050613efd81615b6a565b92915050565b600081519050613f1281615b6a565b92915050565b600082601f830112613f2957600080fd5b8135613f39848260208601613df4565b91505092915050565b600082601f830112613f5357600080fd5b8135613f63848260208601613e32565b91505092915050565b600081359050613f7b81615b81565b92915050565b600081519050613f9081615b81565b92915050565b600081359050613fa581615b98565b92915050565b600060208284031215613fbd57600080fd5b6000613fcb84828501613e70565b91505092915050565b60008060408385031215613fe757600080fd5b6000613ff585828601613e70565b925050602061400685828601613e70565b9150509250929050565b60008060006060848603121561402557600080fd5b600061403386828701613e70565b935050602061404486828701613e70565b925050604061405586828701613f6c565b9150509250925092565b6000806000806080858703121561407557600080fd5b600061408387828801613e70565b945050602061409487828801613e70565b93505060406140a587828801613f6c565b925050606085013567ffffffffffffffff8111156140c257600080fd5b6140ce87828801613f18565b91505092959194509250565b600080604083850312156140ed57600080fd5b60006140fb85828601613e70565b925050602061410c85828601613eaf565b9150509250929050565b6000806040838503121561412957600080fd5b600061413785828601613e70565b925050602061414885828601613f6c565b9150509250929050565b6000806040838503121561416557600080fd5b600061417385828601613e70565b925050602061418485828601613f96565b9150509250929050565b6000602082840312156141a057600080fd5b600082013567ffffffffffffffff8111156141ba57600080fd5b6141c684828501613e85565b91505092915050565b6000602082840312156141e157600080fd5b60006141ef84828501613eaf565b91505092915050565b60006020828403121561420a57600080fd5b600061421884828501613ec4565b91505092915050565b6000806040838503121561423457600080fd5b600061424285828601613ed9565b925050602061425385828601613f6c565b9150509250929050565b60006020828403121561426f57600080fd5b600061427d84828501613eee565b91505092915050565b60006020828403121561429857600080fd5b60006142a684828501613f03565b91505092915050565b6000602082840312156142c157600080fd5b600082013567ffffffffffffffff8111156142db57600080fd5b6142e784828501613f42565b91505092915050565b60006020828403121561430257600080fd5b600061431084828501613f6c565b91505092915050565b60006020828403121561432b57600080fd5b600061433984828501613f81565b91505092915050565b6000806040838503121561435557600080fd5b600061436385828601613f6c565b925050602061437485828601613f6c565b9150509250929050565b600061438a83836148f5565b60208301905092915050565b61439f81615168565b82525050565b60006143b082614fa8565b6143ba8185614fd6565b93506143c583614f98565b8060005b838110156143f65781516143dd888261437e565b97506143e883614fc9565b9250506001810190506143c9565b5085935050505092915050565b61440c8161517a565b82525050565b61441b81615186565b82525050565b61443261442d82615186565b61530b565b82525050565b600061444382614fb3565b61444d8185614fe7565b935061445d818560208601615202565b6144668161540c565b840191505092915050565b600061447c82614fbe565b6144868185615003565b9350614496818560208601615202565b61449f8161540c565b840191505092915050565b60006144b582614fbe565b6144bf8185615014565b93506144cf818560208601615202565b80840191505092915050565b60006144e8601a83615003565b91506144f38261541d565b602082019050919050565b600061450b602b83615003565b915061451682615446565b604082019050919050565b600061452e603283615003565b915061453982615495565b604082019050919050565b6000614551602683615003565b915061455c826154e4565b604082019050919050565b6000614574601c83615003565b915061457f82615533565b602082019050919050565b6000614597602483615003565b91506145a28261555c565b604082019050919050565b60006145ba601983615003565b91506145c5826155ab565b602082019050919050565b60006145dd602b83615003565b91506145e8826155d4565b604082019050919050565b6000614600600983615003565b915061460b82615623565b602082019050919050565b6000614623602c83615003565b915061462e8261564c565b604082019050919050565b6000614646603883615003565b91506146518261569b565b604082019050919050565b6000614669602a83615003565b9150614674826156ea565b604082019050919050565b600061468c602983615003565b915061469782615739565b604082019050919050565b60006146af601183615003565b91506146ba82615788565b602082019050919050565b60006146d2602083615003565b91506146dd826157b1565b602082019050919050565b60006146f5602c83615003565b9150614700826157da565b604082019050919050565b6000614718602083615003565b915061472382615829565b602082019050919050565b600061473b602983615003565b915061474682615852565b604082019050919050565b600061475e602f83615003565b9150614769826158a1565b604082019050919050565b6000614781601f83615003565b915061478c826158f0565b602082019050919050565b60006147a4601183615003565b91506147af82615919565b602082019050919050565b60006147c7601083615003565b91506147d282615942565b602082019050919050565b60006147ea602183615003565b91506147f58261596b565b604082019050919050565b600061480d600e83615003565b9150614818826159ba565b602082019050919050565b6000614830600083614ff8565b915061483b826159e3565b600082019050919050565b6000614853601083615003565b915061485e826159e6565b602082019050919050565b6000614876603183615003565b915061488182615a0f565b604082019050919050565b6000614899602a83615003565b91506148a482615a5e565b604082019050919050565b60006148bc602c83615003565b91506148c782615aad565b604082019050919050565b60006148df600883615003565b91506148ea82615afc565b602082019050919050565b6148fe816151dc565b82525050565b61490d816151dc565b82525050565b61492461491f826151dc565b615315565b82525050565b60006149368285614421565b6020820191506149468284614913565b6020820191508190509392505050565b600061496282856144aa565b915061496e82846144aa565b91508190509392505050565b600061498582614823565b9150819050919050565b60006020820190506149a46000830184614396565b92915050565b60006080820190506149bf6000830187614396565b6149cc6020830186614396565b6149d96040830185614904565b81810360608301526149eb8184614438565b905095945050505050565b6000604082019050614a0b6000830185614396565b614a186020830184614904565b9392505050565b6000606082019050614a346000830186614396565b614a416020830185614904565b8181036040830152614a538184614438565b9050949350505050565b60006020820190508181036000830152614a7781846143a5565b905092915050565b6000602082019050614a946000830184614403565b92915050565b6000604082019050614aaf6000830185614412565b614abc6020830184614904565b9392505050565b6000608082019050614ad86000830187614412565b614ae56020830186614904565b614af26040830185614396565b614aff6060830184614904565b95945050505050565b60006020820190508181036000830152614b228184614471565b905092915050565b60006020820190508181036000830152614b43816144db565b9050919050565b60006020820190508181036000830152614b63816144fe565b9050919050565b60006020820190508181036000830152614b8381614521565b9050919050565b60006020820190508181036000830152614ba381614544565b9050919050565b60006020820190508181036000830152614bc381614567565b9050919050565b60006020820190508181036000830152614be38161458a565b9050919050565b60006020820190508181036000830152614c03816145ad565b9050919050565b60006020820190508181036000830152614c23816145d0565b9050919050565b60006020820190508181036000830152614c43816145f3565b9050919050565b60006020820190508181036000830152614c6381614616565b9050919050565b60006020820190508181036000830152614c8381614639565b9050919050565b60006020820190508181036000830152614ca38161465c565b9050919050565b60006020820190508181036000830152614cc38161467f565b9050919050565b60006020820190508181036000830152614ce3816146a2565b9050919050565b60006020820190508181036000830152614d03816146c5565b9050919050565b60006020820190508181036000830152614d23816146e8565b9050919050565b60006020820190508181036000830152614d438161470b565b9050919050565b60006020820190508181036000830152614d638161472e565b9050919050565b60006020820190508181036000830152614d8381614751565b9050919050565b60006020820190508181036000830152614da381614774565b9050919050565b60006020820190508181036000830152614dc381614797565b9050919050565b60006020820190508181036000830152614de3816147ba565b9050919050565b60006020820190508181036000830152614e03816147dd565b9050919050565b60006020820190508181036000830152614e2381614800565b9050919050565b60006020820190508181036000830152614e4381614846565b9050919050565b60006020820190508181036000830152614e6381614869565b9050919050565b60006020820190508181036000830152614e838161488c565b9050919050565b60006020820190508181036000830152614ea3816148af565b9050919050565b60006020820190508181036000830152614ec3816148d2565b9050919050565b6000602082019050614edf6000830184614904565b92915050565b6000614eef614f00565b9050614efb8282615267565b919050565b6000604051905090565b600067ffffffffffffffff821115614f2557614f246153dd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614f5157614f506153dd565b5b614f5a8261540c565b9050602081019050919050565b600067ffffffffffffffff821115614f8257614f816153dd565b5b614f8b8261540c565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061502a826151dc565b9150615035836151dc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561506a57615069615350565b5b828201905092915050565b6000615080826151dc565b915061508b836151dc565b92508261509b5761509a61537f565b5b828204905092915050565b60006150b1826151dc565b91506150bc836151dc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156150f5576150f4615350565b5b828202905092915050565b600061510b826151dc565b9150615116836151dc565b92508282101561512957615128615350565b5b828203905092915050565b600061513f826151e6565b915061514a836151e6565b92508282101561515d5761515c615350565b5b828203905092915050565b6000615173826151bc565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015615220578082015181840152602081019050615205565b8381111561522f576000848401525b50505050565b6000600282049050600182168061524d57607f821691505b60208210811415615261576152606153ae565b5b50919050565b6152708261540c565b810181811067ffffffffffffffff8211171561528f5761528e6153dd565b5b80604052505050565b60006152a3826151dc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156152d6576152d5615350565b5b600182019050919050565b60006152ec826151e6565b915060ff821415615300576152ff615350565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061532a826151dc565b9150615335836151dc565b9250826153455761534461537f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332393831526f79616c746965733a20546f6f2068696768000000000000600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060008201527f7769746820666175636574000000000000000000000000000000000000000000602082015250565b7f4d6178206c696d69740000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f746f6b656e49647320697320656d707479000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f56616c75652062656c6f77207072696365000000000000000000000000000000600082015250565b7f50617573652069732064697361626c6500000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f53616c6573206e6f74206f70656e000000000000000000000000000000000000600082015250565b50565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f43616e6e6f742066696e6420746f6b656e49647320496e646578202d2072656d60008201527f6f7665546f6b656e496400000000000000000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f536f6c646f757421000000000000000000000000000000000000000000000000600082015250565b615b2e81615168565b8114615b3957600080fd5b50565b615b458161517a565b8114615b5057600080fd5b50565b615b5c81615186565b8114615b6757600080fd5b50565b615b7381615190565b8114615b7e57600080fd5b50565b615b8a816151dc565b8114615b9557600080fd5b50565b615ba1816151e6565b8114615bac57600080fd5b5056fea2646970667358221220673cc12a54cf0639fed64d669df8bf53723108c92c147e9528bb78068568d88964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "rawOwnerOf(uint256)": {
        "details": "Edit for rawOwnerOf token"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_tokenId": "- the NFT asset queried for royalty information",
          "_value": "- the sale price of the NFT asset specified by _tokenId"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for value sale price"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setRoyalties(address,uint256)": {
        "details": "This function in a real contract should be protected with a onlOwner (or equivalent) modifier",
        "params": {
          "recipient": "the royalties recipient",
          "value": "royalties value (between 0 and 10000)"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setRoyalties(address,uint256)": {
        "notice": "Allows to set the royalties on the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1932,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1934,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1938,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1942,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1946,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1952,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2753,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2757,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2760,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2764,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1845,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_royalties",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(RoyaltyInfo)1812_storage"
      },
      {
        "astId": 79,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "nonces",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 273,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3114,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "MAX_ELEMENTS",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3131,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "keyHash",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 3138,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "VRFFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3140,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "LinkToken",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 3142,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "VRFCoordinator",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 3145,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "tokenIds",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3149,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "requestToSender",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3153,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "whiteList",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3156,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "PAUSE",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 3158,
        "contract": "contracts/NFT.sol:Iceberg",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "22",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1812_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Base.RoyaltyInfo",
        "members": [
          {
            "astId": 1809,
            "contract": "contracts/NFT.sol:Iceberg",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1811,
            "contract": "contracts/NFT.sol:Iceberg",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}